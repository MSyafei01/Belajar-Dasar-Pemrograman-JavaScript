A.
// Alert //
Metode yang digunakan untuk menampilkan kotak dialog peringatan dengan pesan yang ditentukan di browser.

//Argument//
Data yang dikirimkan ke dalam function saat function dipanggil, bisa berupa nilai langsung atau variabel.

//Array//
Struktur data yang dapat menyimpan kumpulan data yang terurut. Elemen di dalam array dapat diakses melalui indeks.

B
// Block Statement //
Sekumpulan statement yang dikelompokkan dalam tanda kurung kurawal ({ }) untuk dieksekusi bersama.

// Boolean //
Tipe data yang hanya memiliki dua nilai, yaitu true (benar) dan false (salah).

// Break //
Pernyataan yang digunakan untuk menghentikan perulangan atau percabangan dalam suatu program.

// Browser //
Perangkat lunak yang digunakan untuk mengakses dan menampilkan halaman web.


C
// Closure //
Kombinasi dari function beserta lexical environment-nya yang dapat mengakses variabel di luar function tersebut.

// Comment //
Teks dalam kode yang tidak dijalankan oleh interpreter dan digunakan untuk memberikan catatan atau penjelasan.

// Compiled Language //
Bahasa pemrograman yang membutuhkan proses kompilasi untuk mengubah kode sumber ke bahasa mesin sebelum dijalankan.


D
// Declarative //
Pendekatan pemrograman yang menekankan pada hasil akhir daripada proses atau langkah-langkah spesifik untuk mencapainya.

// Document Object Model (DOM) //
Struktur data yang memungkinkan JavaScript untuk mengakses dan memanipulasi elemen-elemen dalam dokumen HTML.


E
// ECMAScript //
Standar yang menjelaskan cara kerja JavaScript dan spesifikasinya.

// Element //
Nilai yang disimpan di dalam array.

// Expression //
Bagian dari sebuah statement yang menghasilkan nilai, seperti angka atau hasil operasi matematika.

F
// First-class Citizen //
Konsep di mana function dalam JavaScript dapat diperlakukan seperti nilai atau objek lain, dapat disimpan dalam variabel, dikirimkan sebagai argument, atau dikembalikan dari function lain.

// Flow Control //
Urutan bagaimana expression dan statement dijalankan oleh komputer berdasarkan kondisi dan logika tertentu.

// Function //
Blok kode yang dirancang untuk melakukan tugas tertentu dan dapat dipanggil berulang kali dalam program.


G
// Global Object //
Objek yang tersedia secara global dalam lingkungan runtime JavaScript, seperti window di browser dan process di Node.js.

// Global Scope //
Ruang lingkup variabel yang tersedia di seluruh bagian kode, tidak terbatas pada function atau block tertentu.

H
// High-Level Language //
Bahasa pemrograman yang lebih mudah dipahami oleh manusia dan memerlukan konversi ke bahasa mesin untuk dieksekusi.

// Hoisting //
Mekanisme JavaScript yang mengangkat deklarasi variabel dan function ke bagian atas scope sebelum kode dieksekusi.

I 
// Identifier //
Nama yang digunakan untuk mengidentifikasi variabel, function, atau properti lainnya dalam kode.

// Increment //
Penambahan nilai variabel setiap kali perulangan dilakukan.

// Indeks //
Angka yang digunakan untuk merujuk ke posisi nilai di dalam array, dimulai dari 0.

// Interpreter //
Program yang menerjemahkan dan menjalankan kode sumber secara langsung tanpa memerlukan proses kompilasi.


K
// Kompilasi //
Proses mengubah kode sumber dari bahasa pemrograman tingkat tinggi ke bahasa mesin yang dapat dieksekusi oleh komputer.

L
// Looping //
Pernyataan yang memungkinkan eksekusi kode yang sama secara berulang.

M
// Modularisasi //
Teknik pemecahan kode program yang kompleks menjadi bagian-bagian lebih kecil dan sederhana agar lebih terstruktur, singkat, dan jelas.



N
// Node.js //
Runtime environment untuk menjalankan JavaScript di luar browser, memungkinkan pengembangan aplikasi server dan lainnya.

// Number //
Tipe data yang merepresentasikan bilangan bulat atau pecahan dalam JavaScript.



O
// Object //
Struktur data yang menyimpan pasangan key-value. Key dapat berupa string, sedangkan value bisa berupa tipe data apa saja, termasuk objek lain.

// Operator //
Simbol yang digunakan untuk melakukan operasi pada nilai dan variabel, seperti penambahan (+), pengurangan (-), dan sebagainya.



P
// Parameter //
Variabel yang didefinisikan dalam parentheses saat mendeklarasikan function, digunakan untuk menerima input data saat function dipanggil.

// Primitif (tipe data) //
Tipe data yang hanya dapat menyimpan satu jenis data, seperti string, number, boolean, null, dan undefined.



R
// Read-Eval-Print-Loop (REPL) //
Lingkungan interaktif yang membaca, mengevaluasi, dan mencetak hasil eksekusi kode JavaScript secara langsung.

// Return //
Statement dalam function yang mengembalikan nilai dari function tersebut ke tempat function dipanggil.



S
// Scripting Language //
Bahasa pemrograman yang diterjemahkan dan dijalankan secara langsung oleh interpreter tanpa memerlukan proses kompilasi.

// Sintaksis (Syntax) //
Aturan penulisan kode dalam bahasa pemrograman yang harus diikuti agar kode dapat dijalankan dengan benar.

// Syntactic Sugar //
Sintaksis yang dibuat untuk mempermudah implementasi suatu konsep yang sudah ada sebelumnya.

// Statement //
Instruksi lengkap yang ditulis dalam kode pemrograman untuk dijalankan oleh komputer.

// String //
Tipe data yang merepresentasikan teks, ditandai dengan tanda kutip tunggal, ganda, atau backticks.



T
// Template Literal //
Cara menulis string yang memungkinkan penyisipan expression menggunakan tanda backtick dan notasi ${}.

// Terminal //
Antarmuka baris perintah yang digunakan untuk menjalankan perintah dan program pada sistem operasi.

// Tipe Data //
Jenis data yang dapat diolah oleh program, seperti string, number, boolean, null, dan undefined.



V
// Variabel //
Wadah untuk menampung nilai atau data yang dapat digunakan dan dimanipulasi dalam program.


W
// Window //
Global object di lingkungan runtime browser yang menyediakan akses ke elemen dan fitur browser lainnya.


Pahami Dasar JavaScript:

1. const vs let vs var
➡ const
-> Digunakan untuk: Variabel yang tidak akan diubah nilainya.

Contoh: javascript
----------------------------------------------------
const PI = 3.14;
const API_URL = "https://contoh.com/api";
----------------------------------------------------
(Jika coba diubah PI = 5, akan error!)

➡ let
-> Digunakan untuk: Variabel yang bisa diubah nilainya.

Contoh: javascript
let counter = 0;
counter = 1; // Bisa diubah
➡ var (Avoid!)
-> Legacy (sebaiknya hindari, gunakan let/const).

-> Masalah: Scope-nya tidak jelas (function-scoped, bukan block-scoped).

Kapan Pakai?

-> Gunakan const secara default.

-> Pakai let hanya jika nilai perlu diubah.

2. function
➡ Deklarasi Fungsi Biasa
-> Digunakan untuk: Kode yang dipakai berulang.

Contoh: javascript
--------------------------------------------------------------------
function greet(name) {
  return `Halo, ${name}!`;
}
console.log(greet("Syabaqi")); // Output: "Halo, Syabaqi!"
--------------------------------------------------------------------

➡ Arrow Function (=>)
-> Modern, cocok untuk callback.

Contoh: javascript
--------------------------------------------------------------------
const greet =(name) => `Hallo, ${name}!`;
--------------------------------------------------------------------

Kapan Pakai?
-> Gunakan deklarasi biasa jika butuh hoisting (bisa dipanggil sebelum deklarasi).

-> Gunakan arrow function untuk kode singkat atau di dalam map/filter.

3. if/else & switch
➡ Kondisi Sederhana

Contoh: javascript
--------------------------------------------------------------------
let nilai = 80;
if (nilai >= 70) {
  console.log("Lulus!");
} else {
  console.log("Remidi!");
}
--------------------------------------------------------------------

➡ Ternary Operator (Shortcut if/else)
Contoh: javascript
--------------------------------------------------------------------
const status = nilai >= 70 ? "Lulus" : "Remidi";
--------------------------------------------------------------------

Kapan Pakai?
-> if/else untuk logika kompleks.

-> switch untuk banyak kondisi tetap (e.g., pilih hari).


4. for, while, forEach
➡ Looping Array
Contoh: javascript
--------------------------------------------------------------------
const skills = ["HTML", "CSS", "JS"];

// Cara 1: for loop
for (let i = 0; i < skills.length; i++) {
  console.log(skills[i]);
}

// Cara 2: forEach (modern)
skills.forEach(skill => console.log(skill));
--------------------------------------------------------------------

Kapan Pakai?
-> for: Butuh kontrol index.

-> forEach: Lebih simpel untuk array.


5. addEventListener
➡ Handle Event (e.g., klik tombol)
Contoh: javascript
--------------------------------------------------------------------
document.getElementById("myButton").addEventListener("click", () => {
  alert("Tombol diklik!");
});
--------------------------------------------------------------------
Kapan Pakai?

-> Saat butuh interaksi user (klik, input form, dll).

6. class (OOP)
➡ Buat Object yang Reusable
Contoh: javascript
--------------------------------------------------------------------
class User {
  constructor(name) {
    this.name = name;
  }
  greet() {
    console.log(`Halo, ${this.name}!`);
  }
}
const user1 = new User("Syabaqi");
user1.greet(); // Output: "Halo, Syabaqi!"
--------------------------------------------------------------------

Kapan Pakai?

-> Untuk proyek besar yang butuh organisasi kode.
Contoh Integrasi di Web : javascript
--------------------------------------------------------------------
// 1. Simpan data
const biodata = {
  name: "Syabaqi",
  skills: ["JS", "CSS"]
};

// 2. Fungsi tampilkan data
function showBio() {
  document.getElementById("name").textContent = biodata.name;
}

// 3. Event saat halaman loaded
document.addEventListener("DOMContentLoaded", showBio);
--------------------------------------------------------------------
Tips Belajar:

1. Praktik Langsung: Coba ubah nilai const ke let dan lihat perbedaannya.

2. Debugging: Gunakan console.log() untuk cek nilai variabel.

3. Proyek Kecil: Buat to-do list sederhana untuk latihan.

Gunakan kode "Let (Variabel)" untuk bisa merubah nama variabel jika hanya menggunakan const 
        maka variabel harus sesuai tidak bisa di ubah

Contoh js:

--------------------------------------------------------------------
function printCompanyInfo() {
  const name = 'Dicoding'; // <- nama variabel sama
  const legal = 'LLC';
  
  console.log('Company name:', name);
  console.log('Legal type:', legal);
}
 
function printEmployeeInfo() {
  const name = 'John'; // <- nama variabel sama
  const division = 'IT';
  
  console.log('Employee name:', name);
  console.log('Division:', division);
}
 
printCompanyInfo();
printEmployeeInfo();
--------------------------------------------------------------------
// nama variabel yang benar
const firstName = 'Fulan';
const _secondName = 'Fulana';
 
// nama variabel yang salah karena diawali dengan angka
const 1stName = 'Fulan';
const 2ndName = 'Fulana';
--------------------------------------------------------------------
// nama variabel yang benar
const firstName = 'Fulan';
const last_name = 'Lestari';
const $message = 'Hello, World!';
const userId1 = 123;
const userId2 = 456;
 
// nama variabel yang salah
const first-name = 'Fulan'; // tidak boleh mengandung karakter -
const last name = 'Lestari'; // tidak boleh mengandung spasi
const @message = 'Hello, World!'; // tidak boleh mengandung karakter @
 
// ..dan lain-lain
--------------------------------------------------------------------


Operator

simbol seperti + atau - yang sering digunakan untuk melakukan operasi matematika. Ketahuilah bahwa simbol 
tersebut adalah sebuah operator. Faktanya, operator termasuk hal penting yang perlu diketahui agar Anda dapat 
melakukan operasi-operasi dalam membuat sebuah program. Dalam materi kali ini, kita akan membahas jenis-jenis 
operator yang umum digunakan pada JavaScript.

-> Operator merupakan sebuah simbol atau teks yang digunakan untuk melakukan sebuah operasi, misalnya aritmetika, penugasan, logika, tipe data, atau operasi lain yang berhubungan dengan pemrograman.
-> Operan adalah nilai yang menjadi target dari sebuah operasi.

-> Operator (=,+,-,*,%,/,<,>) dan (type, typeof, ...)
-> Operan (1,2,3,4,5,6,7,...) dan ("Belajar", "Sinau", "Dicoding")


Secara umum, operator dalam JavaScript terbagi menjadi tiga kelompok: unary, binary, dan ternary. 
Pengelompokan ini berdasarkan jumlah operan yang diperlukan untuk menggunakan suatu operator.

--------------------------------------------------------------------
let age = 25;
 
// Unary operator
typeof age;
 
// Binary operator
5 + 4;
10 / 2;
age = 30;
 
// Ternary operator (conditional operator)
(age < 18) ? 'You are too young!' : 'Welcome onboard!'; 
--------------------------------------------------------------------

Assignment Operator

-> Operator penugasan atau assignment operator adalah operator yang digunakan untuk memberikan nilai kepada sebuah 
variabel, baik inisiasi nilai baru maupun mengubah nilai yang sudah ada. Operator ini ditulis dengan simbol sama 
dengan (=). Operator penugasan termasuk dalam kategori binary operator karena membutuhkan dua operan, 
yaitu variabel di sisi kiri dan nilai yang akan diberikan di sisi kanan. Operator ini ditulis di antara kedua operan.


--------------------------------------------------------------------
// Digunakan untuk menginisiasi nilai
const name = 'Dicoding';
let location = 'Bandung';
--------------------------------------------------------------------



Arithmetic Operator

Operator ->   Sisa bagi atau Modulus (%)
Deskripsi ->  Binary operator yang mengembalikan sisa hasil bagi operan kiri dan operan kanan.
Notasi ->     Operan1 % operan2
Contoh -> 	  12 % 5 mengembalikan 2.

              10 % 5 mengembalikan 0.

              14 % 3 mengembalikan 2.

Operator ->   Increment (++)
Deskripsi ->  Unary operator yang digunakan untuk menambahkan satu nilai terhadap operan yang diberikan.
              Operan harus berupa variabel yang dapat diubah nilainya.
Notasi ->     ++operan; atau operan++;
Contoh ->     Jika x adalah 3, ++x mengubah x menjadi 4 dan operasi mengembalikan 4.
Deskripsi ->  Jika operator ini digunakan sebelum operan (++x), ia akan mengembalikan nilai x yang telah ditambahkan 1. 
              Jika operator ini digunakan setelah operan (x++), ia akan mengembalikan nilai x yang belum ditambahkan 1. 
Contoh ->     Jika x adalah 3, x++ operasi mengembalikan 3. Setelah itu, mengubah x menjadi 4.

Operator ->   Decrement (--)
Deskripsi ->  Sama seperti increment, tetapi alih-alih menambahkan, ia mengurangi nilai satu.
Notasi ->     --operan; atau operan--;
Contoh ->     Jika x adalah 3, --x mengubah x menjadi 2 dan operasi mengembalikan 2.
COntoh ->     Jika x adalah 3, x-- operasi mengembalikan 3. Setelah itu, mengubah x menjadi 2.


Operator ->   Eksponensial atau Pangkat (**)
Deskripsi ->  Binary operator yang menghitung x (basis) dengan pangkat y (eksponen). Bentuk matematika: x ^ y.
Notasi ->     operan1 ^ operan2
Contoh ->     2 ** 3 mengembalikan 8.
              10 ** 2 mengembalikan 100

Contoh kode yang menunjukkan berbagai penggunaan operator aritmetika dalam JavaScript.

--------------------------------------------------------------------
6 + 5; // mengembalikan 11
7 - 2; // mengembalikan 5
8 * 5; // mengembalikan 40
10 / 3; // mengembalikan 3.33
10 % 2; // mengembalikan 0
2 *(10 + 2); // mengembalikan 24
--------------------------------------------------------------------
Catatan
Tanda kurung dalam operasi aritmetika menentukan urutan operasi yang dijalankan. Operasi yang diberi tanda kurung 
akan dikalkulasi terlebih dulu. Hal ini juga merupakan aturan umum dalam bidang matematika.


Comparison Operator
Operator perbandingan adalah operator yang digunakan untuk membandingkan dua nilai dan mengembalikan nilai boolean 
(true atau false) sebagai hasil perbandingan. Salah satu penggunaan operator perbandingan adalah ketika kita 
berhadapan dengan skenario “Apakah x lebih besar dari y?” dan mendapatkan hasil dalam bentuk “Ya” atau “Tidak”.


Operator ->   Sama (==)
Deskripsi ->  Membandingkan dua operan, tanpa memperhatikan tipe data. Jika nilai kedua operan dianggap sama, operasi akan 
              mengembalikan true, sebaliknya false.
Notasi ->     operan1 == operan2
Contoh ->     1 == 1 mengembalikan true.
              1 == '1' mengembalikan true.
              2 == 6 mengembalikan false.
              'Dicoding' == 'dicoding' mengembalikan false.

Operator ->   Tidak Sama (!=)
Deskripsi ->  Membandingkan dua operan, tanpa memperhatikan tipe data. Jika nilai kedua operan dianggap tidak sama, 
              operasi akan mengembalikan true, sebaliknya false. 
Notasi ->     operan1 != operan2
Contoh ->     1 != 1 mengembalikan false.
              1 != '1' mengembalikan false.
              2 != 6 mengembalikan true.
              'Dicoding' != 'dicoding' mengembalikan true.


Operator ->   Identik (===)
Deskripsi ->  Membandingkan dua operan beserta tipe datanya. Jika kedua operan identik, operasi akan mengembalikan true, 
              sebaliknya false.
Notasi ->     operan1 === operan2
Contoh ->     1 === 1 mengembalikan true.
              1 === '1' mengembalikan false.
              2 === 6 mengembalikan false.
              'Dicoding' === 'dicoding' mengembalikan false.


Operator ->   Tidak Identik (!==)
Deskripsi ->  Membandingkan dua operan beserta tipe datanya. Jika kedua operan tidak identik, operasi akan 
              mengembalikan true, sebaliknya false.
Notasi ->     operan1 !== operan2
Contoh ->     1 !== 1 mengembalikan false.
              1 !== '1' mengembalikan true.
              2 !== 6 mengembalikan true.
              'Dicoding' !== 'dicoding' mengembalikan true.


Operator ->   Lebih dari (>)
Deskripsi ->  Membandingkan dua operan, apakah operan pertama lebih dari operan kedua? Jika pernyataan benar, 
              mengembalikan true, sebaliknya false.
Notasi ->     operan1 > operan2
Contoh ->     4 > 2 mengembalikan true.
              4 > 5 mengembalikan false.
              4 > 4 mengembalikan false.


Operator ->   Lebih dari atau Sama dengan (>=)
Deskripsi ->  Membandingkan dua operan, apakah operan pertama lebih dari atau sama dengan operan kedua? 
              Jika pernyataan benar, mengembalikan true, sebaliknya false.
Notasi ->     operan1 >= operan2
Contoh ->     4 >= 2 mengembalikan true.
              4 >= 5 mengembalikan false.
              4 >= 4 mengembalikan true.
              

Operator ->   Kurang dari (<)
Deskripsi ->  Membandingkan dua operan, apakah operan pertama kurang dari operan kedua? Jika pernyataan benar, mengembalikan true, sebaliknya false.
Notasi ->     operan1 < operan2
Contoh ->     4 < 2 mengembalikan false.
              4 < 5 mengembalikan true.
              4 < 4 mengembalikan false.


Operator ->   Kurang dari atau Sama dengan (<=)
Deskripsi ->  Membandingkan dua operan, apakah operan pertama kurang dari atau sama dengan operan kedua? Jika pernyataan benar, mengembalikan true, sebaliknya false.
Notasi ->     operan1 <= operan2

Contoh ->     4 <= 2 mengembalikan false.
              4 <= 5 mengembalikan true.
              4 <= 4 mengembalikan true.
              
Berikut adalah contoh kode yang menunjukkan berbagai penggunaan operator perbandingan dalam JavaScript.

--------------------------------------------------------------------
const a = 10;
const b = 12;
 
console.log(a < b); // output: true
console.log(a > b); // output: false
--------------------------------------------------------------------  

Logical Operator

Operator ->   AND (&&)
Deskripsi ->  Binary operator yang menghasilkan nilai true apabila kedua operan bernilai true (atau truthy). Jika salah satu
              operan bernilai false (atau falsy), operasi akan mengembalikan false.
Notasi ->     operand1 && operand2
Contoh ->     true && true menghasilkan true.
              false && true menghasilkan false.
              true && false menghasilkan false.
              false && false menghasilkan false.


Operator ->   OR ( || )
Deskripsi ->  Binary operator yang menghasilkan nilai true apabila salah satu operan bernilai true (atau truthy). 
              Jika kedua operan bernilai false (atau falsy), operasi akan mengembalikan false.
Notasi ->     operand1 || operand2
Contoh ->     true || true menghasilkan true.
              false || true menghasilkan true.
              true || false menghasilkan true.
              false || false menghasilkan false.



Operator ->   NOT (!)
Deskripsi ->  Unary operator yang mengubah operan bernilai true menjadi false dan false menjadi true.
Notasi ->     !operan
Contoh ->     !true menghasilkan false.
              !false menghasilkan true.
              !(1 > 2) menghasilkan true.
              !(4 === 4) menghasilkan false.
Berikut adalah contoh kode yang menunjukkan berbagai penggunaan operator logika dalam JavaScript.

--------------------------------------------------------------------
console.log(true && false); // false
console.log(false && false); // false
console.log((5 === 5) && (3 < 5)); // true
 
// OR
console.log(true || true); // true
console.log(false || true); // true
console.log(true || false); // true
console.log(false || false); // false
console.log((5 === 5) || (3 > 5)); // true
 
// NOT
console.log(!true); // false
console.log(!false); // true
--------------------------------------------------------------------


String Operator

Operator string adalah operator yang digunakan untuk menggabungkan dua nilai string. 
Operator ini menggunakan simbol + dan termasuk dalam kategori binary operator.

Berikut adalah contoh penggunaan operator string untuk menggabungkan dua nilai string.

--------------------------------------------------------------------
const first = 'bekerja';
const second = 'sama';
const merged = first + second;
 
console.log(merged); // Output: bekerjasama
--------------------------------------------------------------------


Pengertian Function 




--------------------------------------------------------------------
const temperatureInCelsius = 80;
const temperatureInFahrenheit = 9 / 5 * temperatureInCelsius + 32;

console.log('Hasil konversi:', temperatureInFahrenheit);

/* Output:
Hasil konversi: 176
*/
--------------------------------------------------------------------


Contoh kode penerapan Function

--------------------------------------------------------------------
let temperatureInCelsius;
let temperatureInFahrenheit;

temperatureInCelsius = 50;
temperatureInFahrenheit = 9 / 5 * temperatureInCelsius + 32;
console.log('Hasil konversi:', temperatureInFahrenheit); // output -> Hasil konversi: 122

temperatureInCelsius = 70;
temperatureInFahrenheit = 9 / 5 * temperatureInCelsius + 32;
console.log('Hasil konversi:', temperatureInFahrenheit); // output -> Hasil konversi: 158

temperatureInCelsius = 100;
temperatureInFahrenheit = 9 / 5 * temperatureInCelsius + 32;
console.log('Hasil konversi:', temperatureInFahrenheit); // output -> Hasil konversi: 212
--------------------------------------------------------------------

#CATATAN : "LET" digunakan agar data bisa di ubah



Deklarasi Function
Pembuatan function sebetulnya mirip dengan pembuatan variabel. Dalam variabel, nilai dapat kita akses dengan 
menyebutkan nama variabelnya. Hal ini karena memang kita menyimpan atau mengikat nilai dalam variabel tersebut. 
Sebuah function juga diikat dalam sebuah nama function. Dengan kata lain, 
// nama function tersebut adalah identifier.

Function -> Function Keyword
greetWorld() -> Identifier
console.log('Hello,WOrd'); -> Function Body

Keyword “function” harus selalu disertakan ketika mendeklarasikan function.

Berikut contoh penggunaan Function 
--------------------------------------------------------------------
function convertCelsiusToFahrenheit(temperature) {
  const temperatureInFahrenheit = 9 / 5 * temperature + 32;
 
  console.log('Hasil konversi:', temperatureInFahrenheit);
}
--------------------------------------------------------------------


Parameter dan Argument
--------------------------------------------------------------------
function convertCelsiusToFahrenheit(temperature) {
  const temperatureInFahrenheit = 9 / 5 * temperature + 32;
 
  console.log('Hasil konversi:', temperatureInFahrenheit);
}
--------------------------------------------------------------------

--------------------------------------------------------------------
// Langsung memasukkan nilai
convertCelsiusToFahrenheit(100);
 
// Memasukkan nilai dengan variabel
const temperatureInCelsius = 90;
convertCelsiusToFahrenheit(temperatureInCelsius);
--------------------------------------------------------------------

Default Parameter

--------------------------------------------------------------------
function convertCelsiusToFahrenheit(temperature) {
  const temperatureInFahrenheit = (9 / 5) * temperature + 32;
  console.log('Hasil konversi:', temperatureInFahrenheit);
}

convertCelsiusToFahrenheit();

/* Output:
Hasil konversi: NaN
*/
--------------------------------------------------------------------
Hasilnya bisa NaN (Not-a-Number) karena pada variabel temperature sebelum operator +, jika variabel di ganti dengan
angka maka kode akan bisa berjalan semestinya


--------------------------------------------------------------------
function convertCelsiusToFahrenheit(temperature = 50) {
  const temperatureInFahrenheit = 9 / 5 * temperature + 32;

  console.log('Hasil konversi:', temperatureInFahrenheit);
}

// Menggunakan default value
convertCelsiusToFahrenheit(); // output: Hasil konversi: 122

// Menggantikan default value
convertCelsiusToFahrenheit(90); // output: Hasil konversi: 194
--------------------------------------------------------------------
Dapat di perhatikan bagian atas , (temperature = 50) saat ketambah sintak (= 50) maka variabel temperature
dapat dipastkan 50 

Return Value


Function Expression
Function expression terdiri dari dua kata, yaitu "function" dan "expression". Kita sudah mengenal function, 
begitu juga dengan expression. Lantas, function expression dapat kita artikan sebagai kode yang mengembalikan 
nilai function.


Menjadi First-Class Citizen

--------------------------------------------------------------------
function multiply(a, b) {
  return a * b;
}

function calculate(operation, numA, numB) {
  return operation(numA, numB);
}

const result = calculate(multiply, 2, 4);
console.log(result);

/* Output:
8
*/
--------------------------------------------------------------------

Arrow Function
Function expression benar-benar bisa mengubah cara kita membuat function. Namun, ada alternatif sintaksis lain 
dalam JavaScript yang bisa lebih mengubah cara kita membuat function. 
Deklarasi
--------------------------------------------------------------------
function multiplier(x) {
  return function (num) {
    return x * num;
  };
}

const double = multiplier(2);
const triple = multiplier(3);

console.log(double(10));
console.log(triple(11));

/* Output:
20
33
*/
--------------------------------------------------------------------


--------------------------------------------------------------------
let temperatureInFahrenheit = null;

// Deklarasi function dengan Regular Function
const ubahCkeF_FunctionBiasa = function (temperature) {
  const result = (9 / 5) * temperature + 32;
    return result;
};

temperatureInFahrenheit = ubahCkeF_FunctionBiasa(90);
console.log('Hasil konversi:', temperatureInFahrenheit);
// Hasil ==> Hasil konversi: 194

// Deklarasi Function dengan Arrow Function
const ubahCkeF_ArrowFunction = (temperature) => {
  const result = (9 / 5) * temperature + 32;
    return result;
};

temperatureInFahrenheit = ubahCkeF_ArrowFunction(90);
console.log('Hasil konversi:', temperatureInFahrenheit);
// Hasil ==> Hasil konversi: 194
// Regular function adalah cara penulisan function yang telah kita gunakan sebelumnya, 
        // sedangkan arrow function adalah cara lain dalam membuat function.
--------------------------------------------------------------------

Menstrukturkan Data dengan Object

Object adalah kumpulan pasangan key-value dan merupakan tipe data yang bukan primitif. Jika tipe data primitif 
hanya dapat menyimpan satu jenis data seperti string atau number, tipe data object dapat menyimpan data yang 
beragam dan kompleks. 

Membuat Object
1. const user = {};
2. const products = { name: 'Sepatu', price: 230000 };


Properti memiliki key dan value. Key dari properti dapat berupa string dan value dapat bernilai tipe data apa pun, 
seperti string, number, atau boolean. Properti yang ada di dalam object dipisahkan oleh koma.


Contoh kode :
--------------------------------------------------------------------
const user = {
  name: 'Dicoding',
  'last name': 'Indonesia',
  age: 9,
};

console.log(user);


output : { name: 'Dicoding', 'last name': 'Indonesia', age: 9 }

--------------------------------------------------------------------


--------------------------------------------------------------------
const user = {
  name: 'Dicoding',
  lastname: 'Indonesia',
  age: 9,
};

console.log(user.name); // Output: Dicoding
--------------------------------------------------------------------

Kita dapat memanggil nama object, kemudian menuliskan tanda titik yang diikuti dengan nama propertinya. 


=> Mengakses menggunakan dot
Mengakses menggunakan square bracket
Untuk menutupi kekurangan menggunakan dot notation, ada cara lain yaitu menggunakan square bracket.
Contoh:
--------------------------------------------------------------------
const user = {
  name: 'Dicoding',
  'last name': 'Indonesia',
  age: 9,
};

console.log(user['last name']); // Output: Indonesia

setelah saya pelajari ternyata bisa menggunakan


const user = {
  name: 'Dicoding',
  lastname: 'Indonesia',
  age: 9,
};

console.log(user.lastname); // Output: Indonesia

"PERHATIKAN PENULISAN KEDUA KODE TERSEBUT, PASTI KAU AKAN PAHAM DI BAGIAN LAST NAME"
--------------------------------------------------------------------


Mengakses menggunakan object destructuring
--------------------------------------------------------------------
const user = {
  'name': 'Dicoding',
  lastName: 'Indonesia',
  age: 9
};

const { name, lastName } = user;
console.log(name, lastName); // Output: Dicoding Indonesia
--------------------------------------------------------------------


--------------------------------------------------------------------
const user = {
  'name': 'Dicoding',
  lastName: 'Indonesia',
  age: 9
};

const { name, lastName, isMale = false } = user;
console.log(isMale); // Output: false
--------------------------------------------------------------------

--------------------------------------------------------------------
const user = {
  id: 24,
  email: 'aras@dicoding.com',
  name: 'Arsy',
  nickname: 'Aras',
  username: 'aras123',
  password: 'secret',
};

const { id, email } = user;

console.log(id, email);
--------------------------------------------------------------------

Mengubah Nilai di Properti Object
--------------------------------------------------------------------
const account = {
  balance: 1000,
  debt: 10,
};

account.balance = 2000;
console.log(account.balance); // Output: 2000
--------------------------------------------------------------------




Menghapus Properti di Object
--------------------------------------------------------------------
const user = {
  'name': 'Dicoding',
  'last name': 'Indonesia',
  age: 9,
};

delete user.age;
console.log(user); // Output: { name: 'Dicoding', 'last name': 'Indonesia' }
--------------------------------------------------------------------


Mengubah Nilai di Properti Object
--------------------------------------------------------------------
const account = {
  balance: 1000,
  debt: 10,
};

account.balance = 2000;
console.log(account.balance); // Output: 2000
--------------------------------------------------------------------




Menghapus Properti di Object
--------------------------------------------------------------------
const user = {
  'name': 'Dicoding',
  'last name': 'Indonesia',
  age: 9,
};

delete user.age;
console.log(user); // Output: { name: 'Dicoding', 'last name': 'Indonesia' }

atau bisa menggunakan kode akhir yang beda menggunakan kode dot notation (.)

const user = {
  'name': 'Dicoding',
  lastName: 'Indonesia',
  age: 9,
};

delete user['age'];
console.log(user); // Output: { name: 'Dicoding', lastName: 'Indonesia' }
--------------------------------------------------------------------



Menstrukturkan Data dengan Array.
Array adalah struktur data spesial yang dapat menyimpan kumpulan data yang terurut. Letak perbedaan array dengan 
object adalah data yang disimpan di dalam array terurut, sedangkan di object tidak terurut. 
Array dapat menyimpan nilai dengan tipe data apa pun, seperti number, object, dan string.
--------------------------------------------------------------------
const array = [1, 2];
console.log(typeof array); // Output: object
--------------------------------------------------------------------

Pada array numbers, kita menambahkan angka 5 pada constructornya sehingga itu menjadi initial length dari array. 
Meskipun sudah menetapkan panjangnya 5, kita masih bisa menambahkan dan menghapus element di array numbers tersebut.





Menggunakan object constructor
Array dapat dibuat dengan constructor new Array() seperti berikut.

--------------------------------------------------------------------
const users = new Array();
const numbers = new Array(5);
--------------------------------------------------------------------

Array users merupakan array kosong yang belum memiliki element dan jika kita lihat di console akan menghasilkan [].
--------------------------------------------------------------------
const users = new Array();
console.log(users);
--------------------------------------------------------------------



Menggunakan sintaks Array.from
--------------------------------------------------------------------
const bayan = Array.from('bayan');
console.log(bayan); // Output: [ 'b', 'a', 'y', 'a', 'n' ]
--------------------------------------------------------------------
Array.from merupakan method untuk membuat array yang diperkenalkan di ES6. Array.from 
juga dapat dimanfaatkan untuk menyalin array lainnya seperti berikut ini.


Menghapus Element dan Data Array

--------------------------------------------------------------------
let myArray = ['Android', 'Data Science', 'Web'];
delete myArray[1];
console.log(myArray); 
// Output: ['Android', <1 empty item>, 'Web']
--------------------------------------------------------------------

Data pada array sudah berhasil dihapus, tetapi element-nya masih ada. Lalu, 
bagaimana cara untuk menghapus element dan datanya? Untuk melakukan hal itu dapat dilakukan dengan menggunakan 
method splice() seperti berikut ini.

--------------------------------------------------------------------
let myArray = ['Android', 'Data Science', 'Web'];
myArray.splice(1, 1);
console.log(myArray); // Output: ['Android', 'Web']
--------------------------------------------------------------------

Method splice membutuhkan dua parameter yaitu indeks dari element yang ingin dihapus dan jumlah element 
yang ingin dihapus. Pada contoh di atas, kita menghapus element indeks ke-1 dan jumlah element yang dihapus 
adalah 1.

--------------------------------------------------------------------
let myArray = ['Android', 'Data Science', 'Web'];
myArray.splice(1, 2);
console.log(myArray); // Output: ['Android']
--------------------------------------------------------------------





Array Destructuring
-> Destructuring digunakan untuk melihat isi dari array. Destructuring cukup mudah dilakukan yaitu dengan 
menggunakan kurung siku yang di dalamnya adalah nama variabel yang kita assign. Kemudian diikuti dengan 
assignment operator sama dengan (=) dan array yang ingin diambil nilainya.

--------------------------------------------------------------------
const introduction = ['Hello', 'Arsy'];
const [greeting, name] = introduction;
console.log(greeting); // Output: Hello
--------------------------------------------------------------------


Array Method
-> Perlu diketahui bahwa array memiliki banyak sekali method atau fungsi bawaan yang dapat digunakan 
untuk memudahkan proses pengelolaan atau penggunaannya. 

Reverse
-> Reverse adalah method yang digunakan untuk membalikkan nilai array. Metode reverse() mengembalikan array 
dengan element yang dibalik.

--------------------------------------------------------------------
const myArray = ['Android', 'Data Science', 'Web'];
myArray.reverse();
console.log(myArray); // Output: [ 'Web', 'Data Science', 'Android' ]
--------------------------------------------------------------------



Sort
-> Sort adalah method yang digunakan untuk mengurutkan nilai array. 
Loh, katanya array sudah menyimpan data secara terurut kok masih perlu mengurutkan array menggunakan sort? 
Memang array sudah mengurutkan data sesuai dengan indeks-nya tetapi mengurutkan berdasarkan indeks saja belum cukup.

--------------------------------------------------------------------
const myArray = ['Web', 'Android', 'Data Science'];
myArray.sort();
console.log(myArray); // Output: [ 'Android', 'Data Science', 'Web' ]
--------------------------------------------------------------------



Membuat Map
--------------------------------------------------------------------
const map = new Map();
--------------------------------------------------------------------


Pengisian kode Map
--------------------------------------------------------------------
const productMap = new Map([
  ['shoes', 500],
  ['cap', 350],
  ['jeans', 250]
]);

console.log(productMap);
// Map(3) { 'shoes' => 500, 'cap' => 350, 'jeans' => 250 }
--------------------------------------------------------------------


Menyimpan Nilai di Map
--------------------------------------------------------------------
const map = new Map();
map.set('name', 'aras');
console.log(map); // Map(1) { 'name' => 'aras' }
// Output Map(3) { 'shoes' => 500, 'cap' => 350, 'jeans' => 250 }
--------------------------------------------------------------------


--------------------------------------------------------------------
const map = new Map();
map.set(1, 'number one');
console.log(map); // Map(1) { 1 => 'number one' }
// Output Map(1) { 'name' => 'aras' }
--------------------------------------------------------------------

Mengakses Nilai di Map
--------------------------------------------------------------------
const map = new Map();
map.set('name', 'aras');
console.log(map.get('name')); // Output: aras
// Output aras
--------------------------------------------------------------------


Menghapus Nilai di Map
--------------------------------------------------------------------
const map = new Map();
map.set('name', 'aras');
map.set('last name', 'opraza');
map.delete('last name');
console.log(map); // Map(1) { 'name' => 'aras' }
// Output Map(1) { 'name' => 'aras' }
--------------------------------------------------------------------


Spread Operator
Spread, memiliki arti sesuai dengan namanya, yaitu menyebarkan. Spread operator digunakan untuk menyebarkan 
nilai yang ada pada object dan array. Spread operator yang ditandai dengan sintaks tiga titik  (...) adalah fitur 
yang menarik dan membantu dalam pengelolaan object dan array.


Object
Spread operator di object dapat dilakukan seperti berikut ini.
--------------------------------------------------------------------
const obj1 = { name: 'Dicoding' };
const obj2 = { lastName: 'Indonesia', address: 'Jl. Batik Kumeli No 50' };
const newObj = { ...obj1, ...obj2 };

console.log(newObj); // Output: { name: 'Dicoding', lastName: 'Indonesia', address: 'Jl. Batik Kumeli No 50' }
--------------------------------------------------------------------

--------------------------------------------------------------------
const originalObj = { name: 'Dicoding', age: 9 };
const copiedObj = { ...originalObj };

console.log(copiedObj); // Output: { name: 'Dicoding', age: 9 }
--------------------------------------------------------------------


Array
--------------------------------------------------------------------
const array1 = ['Dicoding'];
const array2 = ['Indonesia', 'Jl. Batik Kumeli No 50'];
const newArray = [...array1, ...array2];

console.log(newArray); // Output: ['Dicoding', 'Indonesia', 'Jl. Batik Kumeli No 50']
--------------------------------------------------------------------


--------------------------------------------------------------------
const original = ['apple', 'banana', 'cherry'];
const copy = [...original];

console.log(copy); // Output: ['apple', 'banana', 'cherry']
--------------------------------------------------------------------

Rest Operator
Masalah terjadi ketika argument-nya sudah melebihi dua karena terlalu banyak argument pada function membuat kode 
menjadi tidak bersih (tidak sesuai prinsip clean code) sehingga sulit untuk dibaca dan di-maintenance.

Solusinya adalah menggunakan rest operator. Rest operator memungkinkan function untuk menerima argument dalam 
bentuk array. Rest operator yang digunakan pada parameter fungsi sering disebut sebagai Rest Parameter.

--------------------------------------------------------------------
function myFunc(...name) {
  console.log('name:', name);
}

myFunc('Rafy', 'Fikri', 'Dimas');
--------------------------------------------------------------------

Rest parameter memungkinkan kita untuk menulis argument yang tak terbatas pada function. 
Rest parameter akan menangani argument tersebut menjadi sebuah array dan meneruskannya ke function.

--------------------------------------------------------------------
function myFunc(number, ...name) {
  console.log('number', number);
  console.log('name', name);
}
Karena rest parameter menangani argument sebagai array, method array.length juga dapat digunakan pada rest parameter seperti berikut ini.
myFunc('one', 'Arsy', 'Aras');
--------------------------------------------------------------------

Karena rest parameter menangani argument sebagai array, method array.length juga dapat digunakan pada 
rest parameter seperti berikut ini.
--------------------------------------------------------------------
function myFunc(...name) {
  console.log(name.length);
  console.log('name', name);
}

myFunc('Adi', 'Nur', 'Arif');
// Output name [ 'Adi', 'Nur', 'Arif' ]
--------------------------------------------------------------------



Tak hanya method array.length, kita juga dapat menggunakan method array lainnya pada rest parameter.

Selain pada parameter fungsi, rest operator juga kerap digunakan ketika kita melakukan destructuring array untuk 
menangkap seluruh sisa elemen terakhir dalam bentuk array.

--------------------------------------------------------------------
const favorites = ['Nasi Goreng', 'Mie Goreng', 'Ayam Bakar', 'Tahu', 'Tempe'];

const [first, second, ...rest] = favorites;

console.log(first);
console.log(second);
console.log(rest);

/**
 * output:
 * Nasi Goreng
 * Mie Goreng
 * [ 'Ayam Bakar', 'Tahu', 'Tempe' ]
 */

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

Flow Controls

--------------------------------------------------------------------
const number = 100;
console.log(number);
output = 100
--------------------------------------------------------------------
 flow control adalah urutan bagaimana expression dan statement dijalankan oleh komputer berdasarkan kondisi dan 
 logika tertentu (yang akan kita bahas di modul ini).


Conditional
Conditional flow adalah cara untuk menentukan apakah kode dieksekusi atau dilewatkan. Jika suatu kondisi terpenuhi, 
kode akan dieksekusi dan kode yang lainnya akan diabaikan. Kondisi ini ditentukan dari inputan yang diberikan oleh 
pengguna. 

If Statement
If statement merupakan fundamental statement yang memungkinkan JavaScript untuk membuat
keputusan apakah mengeksekusi program atau tidak.

--------------------------------------------------------------------
if (expression)
   statement
--------------------------------------------------------------------



--------------------------------------------------------------------
const gajian = true;

console.log('Berjalan-jalan di mal');
if (gajian) {
  console.log('Makan di restoran mal');
}
console.log('Pulang ke rumah');
--------------------------------------------------------------------



Ternary operator membutuhkan tiga operan dengan urutan seperti berikut:

1. Kondisi yang ingin diperiksa ditulis sebelum tanda tanya (?)
2. Ekspresi yang dieksekusi jika kondisinya benar.
3. Ekspresi yang dieksekusi jika kondisi salah.

--------------------------------------------------------------------
const price = 100000;
const isMember = true;
const discount = isMember ? 0.1 : 0;

console.log(`Anda mendapatkan discount sebesar ${discount * price}`);
output : Anda mendapatkan discount sebesar 10000
--------------------------------------------------------------------


Switch Case
Switch statement adalah control flow statement yang mengevaluasi expression terhadap beberapa kasus.
Switch dapat menggantikan beberapa pengecekan kondisi yang dilakukan oleh if. Selain itu, menggunakan switch 
membuat kode menjadi lebih readable dan ringkas. Inilah struktur dari switch case statement.

Kode di atas memiliki variabel isMember dengan nilai true sehingga ketika dieksekusi akan mendapatkan discount 
sebesar 0.1 atau 10%.

--------------------------------------------------------------------
switch (expression) {
    statement }
--------------------------------------------------------------------

contoh penggunaan switch case di JavaScript.

const fruit = 'apple';

--------------------------------------------------------------------
switch (fruit) {
  case 'banana':
    console.log('I am a banana.');
    break;
  case 'apple':
    console.log('I am an apple.');
    break;
  case 'orange':
    console.log('I am an orange.');
    break;
  case 'strawberry':
    console.log('I am a strawberry.');
    break;
  default:
    console.log('I am not a fruit. I am a programmer.');
}
--------------------------------------------------------------------

Tanda kurung setelah keyword switch berisi variabel atau expression yang akan dievaluasi (sebuah kondisi). 
Keyword case diikuti dengan nilai (banana/apple/orange/strawberry) yang ingin kita bandingkan dengan variabel 
yang ada di dalam switch (fruit). Jika nilai yang ada di case sama dengan nilai yang ada di fruit, blok kode 
setelah titik dua (:) akan dieksekusi. Selain itu, ada blok kode default yang berfungsi jika tidak ada nilai case 
yang sama dengan nilai variabel pada switch. 


Kini, Anda akan mulai berpikir dan bertanya. Apa bedanya dengan if-else? Toh, sama-sama melakukan pengecekan 
kondisi. Sebenarnya, switch case memang melakukan hal yang sama dengan if/else, switch hanya menggantikan 
penggunaan if yang berulang untuk mengecek kondisi. Perbedaan switch case dan if/else terdapat pada penulisan 
sintaks yang lebih readable dan beberapa kasus penggunaan switch lebih efisien. Perhatikan contoh pengecekan 
kondisi dengan if/else berikut ini.


--------------------------------------------------------------------
const day = new Date().getDay();
if (day === 0) {
  console.log('Minggu');
} else if (day === 1) {
  console.log('Senin');
} else if (day === 2) {
  console.log('Selasa');
} else if (day === 3) {
  console.log('Rabu');
} else if (day === 4) {
  console.log('Kamis');
} else if (day === 5) {
  console.log('Jumat');
} else if (day === 6) {
  console.log('Sabtu');
} else {
  console.log('Hari tidak valid');
}
--------------------------------------------------------------------

Nilai variabel day berisi angka sesuai dengan hari ini. Kita akan mengecek kondisi secara berulang dengan
 membandingkan nilai variabel day dengan yang ada di dalam if, dan ini merupakan hal yang sia-sia. Bandingkan 
 jika kita menggunakan switch berikut ini.



--------------------------------------------------------------------
const day = new Date().getDay();

switch (day) {
  case 0:
    console.log('Minggu');
    break;
  case 1:
    console.log('Senin');
    break;
  case 2:
    console.log('Selasa');
    break;
  case 3:
    console.log('Rabu');
    break;
  case 4:
    console.log('Kamis');
    break;
  case 5:
    console.log('Jumat');
    break;
  case 6:
    console.log('Sabtu');
    break;
  default:
    console.log('Hari tidak valid');
}
--------------------------------------------------------------------

Keyword break akan membuat pengecekan berhenti jika nilai variabel day sama dengan nilai yang ada case. 
Jika menggunakan switch terlihat lebih ringkas dan mudah dibaca, kan? Switch sangat bagus digunakan ketika banyak 
kondisi yang perlu dicek (misalnya pada contoh di atas), jika kondisi yang akan dicek masih sedikit misalnya hanya
dua kondisi, gunakanlah if/else.

Sebelumnya kita sudah singgung sedikit tentang penggunaan keyword break yang ada di switch case. Keyword break 
berfungsi untuk menghentikan pengecekan kondisi sehingga blok kode yang ada di case lainnya tidak akan dijalankan. 
Seandainya break lupa atau tidak ditulis, apa yang terjadi? Coba perhatikan kode berikut ini.


--------------------------------------------------------------------
const number = 2;

switch (number) {
case 1:
  console.log('Ini 1');
  break;
case 2:
  console.log('Ini 2');
case 3:
  console.log('Ini 3');
  break;
default:
  console.log('Ini default');
}
--------------------------------------------------------------------
Variabel number bernilai 2 sehingga kode yang ada di blok case 2 akan dieksekusi. Karena tidak ada keyword break 
di blok kode tersebut, blok case selanjutnya akan dijalankan sehingga hasilnya menjadi seperti di bawah ini.


--------------------------------------------------------------------
Ini 2
Ini 3
--------------------------------------------------------------------



Looping
Ketika Anda memprogram, ada banyak sekali instruksi yang Anda tulis untuk dieksekusi oleh komputer.

--------------------------------------------------------------------
const foods = ['Nasi Goreng', 'Pasta', 'Sate'];

console.log(foods[0]);
console.log(foods[1]);
console.log(foods[2]);
output : Nasi Goreng, Pasta, Sate
--------------------------------------------------------------------

Hal tersebut memang memungkinkan, tetapi tidak praktis karena melakukan hal yang sama berulang. Lebih tidak 
praktis lagi ketika list makanan tersebut berisi data 10 makanan atau bahkan 100 makanan. Sudah terbayang, kan? 
Repot dan tidak praktisnya menulis kode secara berulang.

Untuk menghindari hal itu, perkenalkan inilah looping. Looping (perulangan) adalah statements yang memungkinkan 
kita untuk mengeksekusi kode yang sama secara berulang. Di JavaScript terdapat banyak jenis perulangan, seperti 
for loop, for in, for of, while, dan do-while.


For 
For adalah cara looping yang paling umum dilakukan di JavaScript. Semenjak kehadiran ES6, for terbagi lagi 
menjadi beberapa jenis. Saat ini, for terdiri dari for loop, for in, for of. Simak penjelasan berikut ini.


For Loop
Pertama, kita akan bahas for loop. Struktur dari for loop tampak seperti berikut ini.
--------------------------------------------------------------------
for (variabel awal; test kondisi; increment) {
  // do something
}
--------------------------------------------------------------------

Variabel awal adalah nilai variabel sebelum looping dilakukan. Test kondisi adalah evaluasi dari looping, 
jika bernilai false, looping akan berhenti.


--------------------------------------------------------------------
for (let i = 0; i < 5; i++) {
  console.log(`Angka ke-${i} adalah ${i}`);
}

Output : Angka ke-0 adalah 0
Angka ke-1 adalah 1
Angka ke-2 adalah 2
Angka ke-3 adalah 3
Angka ke-4 adalah 4
--------------------------------------------------------------------
Pada contoh di atas, nol merupakan nilai awal sebelum looping dijalankan. Pengecekan kondisi i < 5 sebelum looping, 
ketika bernilai false, looping akan terhenti. Terakhir, i++ artinya adalah nilai i akan bertambah setiap looping 
dilakukan.


For In
For in banyak digunakan untuk pengulangan pada object karena ia dapat melakukan iterasi ke seluruh data di dalam 
objek. 

--------------------------------------------------------------------
const person = { name: 'Fulan', origin: 'Bandung', birthYear: 2024 };

for (const property in person) {
  console.log(`${property} bernilai ${person[property]}`);
}
Output : name bernilai Fulan
origin bernilai Bandung
birthYear bernilai 2024
--------------------------------------------------------------------


For Of
Kehadiran for of dimulai pada ECMAScript 2015 (ES6). For of berbeda dengan for in. For of lebih sederhana karena 
kita tidak perlu memikirkan property dan key.

--------------------------------------------------------------------
const names = ['Bebek', 'Ayam', 'Telor', 'Tempe'];

for (const item of names) {
  console.log(item);
}
Ouput : Bebek
Ayam
Telor
Tempe
--------------------------------------------------------------------

Dengan for of datanya bisa kita dapatkan langsung tanpa menambahkan indeks atau nama propertinya seperti contoh 
di atas. Sintaksnya lebih ringkas karena kita hanya perlu memanggil variabel item. Variabel item merupakan sebuah 
variabel yang digunakan untuk menampung element dari array. For of dapat digunakan pada object yang bisa diiterasi 
seperti arrays, strings, sets, dan maps.



While
Perulangan di JavaScript tak hanya menggunakan for, tetapi ada cara lainnya yaitu while statement. 
While statement akan mengeksekusi statement ketika kondisinya bernilai truthy.

--------------------------------------------------------------------
while (condition) 
     statement
--------------------------------------------------------------------

Iterasi akan berjalan ketika kondisi bernilai true. Oleh karena itu, perlu untuk berhati-hati ketika mengecek 
kondisi tersebut.
--------------------------------------------------------------------
let i = 0;

while (i < 5) {
  console.log(`Angka ke-${i} adalah ${i}.`);
  i++;
}
Output : Angka ke-0 adalah 0.
Angka ke-1 adalah 1.
Angka ke-2 adalah 2.
Angka ke-3 adalah 3.
--------------------------------------------------------------------


While hanya peduli dengan kondisi yang kita berikan. Oleh karena itu, jangan lupa untuk mengubah kondisi tersebut,
 misalnya pada contoh kita memberikan kondisi i < 5. Ketika while dieksekusi, jangan lupa untuk mengubah variabel 
 i agar kondisinya berubah menjadi true atau false.


--------------------------------------------------------------------
let i = 0;

while (i < 5) {
  console.log(`Angka ke-${i} adalah ${i}.`);
}

Output : Angka ke-0 adalah 0.
Angka ke-1 adalah 1.
Angka ke-2 adalah 2.
Angka ke-3 adalah 3.
Angka ke-4 adalah 4.
--------------------------------------------------------------------
karena kita tidak mengubah nilai variabel i sehingga dia akan selalu bernilai 0 yang mana nol lebih kecil dari 
lima (kondisi akan selalu true). 


Keunggulan dari while adalah ia tidak perlu tahu jumlah data yang akan di-looping. 




Control Statement
Control statement berfungsi untuk menghentikan eksekusi kode. 
Beberapa statement yang masuk ke dalam kategori control statement adalah break dan continue.


Break
Break statement adalah cara kita untuk memberitahukan interpreter yang sedang mengeksekusi kode untuk berhenti 
dan langsung berpindah ke akhir dari percabangan atau perulangan. 

--------------------------------------------------------------------
for (let i = 0; i < 10; i++) {
  if (i === 5) {
    break;
  }

  console.log(i);
}
Output : 0
1
2
3
4
--------------------------------------------------------------------
Contoh lainnya adalah penggunaan break pada switch case statement.

--------------------------------------------------------------------
const number = 1;

switch (number) {
  case 1:
    console.log('Ini 1');
    break;
  case 2:
    console.log('Ini 2');
    break;
  case 3:
    console.log('Ini 3');
    break;
  default:
    console.log('Ini default');
}
Output : Ini 1
--------------------------------------------------------------------
Di saat kondisi case terpenuhi maka program akan berhenti dan tidak akan melakukan pengecekan pada case berikutnya.



Continue
Continue statement sama seperti break statement. Namun, alih-alih menghentikan eksekusi program, continue akan 
melanjutkan iterasi ke iterasi berikutnya.
--------------------------------------------------------------------
for (let i = 0; i < 10; i++) {
  if (i === 5) {
      continue;
  }
  console.log(i);
}
Output : 0
1
2
3
4
6
7
8
9
--------------------------------------------------------------------
Looping akan berjalan seperti biasa. Namun, ketika nilai variabel i sama dengan 5, iterasi akan dihentikan dan 
lanjut ke iterasi berikutnya sehingga di terminal/console tidak akan menampilkan angka 5



Error Handling
Error yang terjadi bisa berasal dari expected error (error yang terduga) 
dan unexpected error (error yang tidak terduga). 

Error yang dibiarkan dan tidak ditangani akan menyebabkan crash pada program yang dibangun. JavaScript memiliki 
cara untuk menangani error tersebut yang disebut dengan error handling. Error handling dapat mencegah crash pada 
program ketika terjadi error yang disebabkan oleh kesalahan syntax atau error lainnya.


Throwing Error
Saat terjadi error, sinyal yang disebut dengan exception akan bangkit. Cara lain untuk membuat exception adalah 
menggunakan keyword throw untuk generate sebuah error. Sintaks dasarnya adalah seperti berikut.
--------------------------------------------------------------------
throw <objek error>
--------------------------------------------------------------------

JavaScript memiliki built-in constructor untuk standar error meliputi Error, SyntaxError, dan sebagainya.  
Perhatikan contoh berikut ini.
--------------------------------------------------------------------
const error = new Error('Terjadi error');
console.error(error);
--------------------------------------------------------------------
Pada contoh di atas, kita menggunakan built-in constructor milik JavaScript, Error.
karena kita ingin program yang dibangun tidak mengalami crash ketika terjadi sesuatu di luar dugaan.


Catching Error
Try-Catch
Try-catch merupakan cara yang dimiliki JavaScript untuk menangani error.
Try-catch memiliki dua blok utama yaitu try dan catch. 

--------------------------------------------------------------------
try {
 
  // code...
 
} catch (err) {
 
  // error handling
 
}
--------------------------------------------------------------------

--------------------------------------------------------------------
try {
  console.log('Memulai program');
  console.log('Mengakhiri program');
} catch (err) {
  console.log('Karena tidak ada error, blok ini akan diabaikan');
}
Output : Memulai program
Mengakhiri program
--------------------------------------------------------------------
Kode tersebut tidak akan mengeksekusi kode di dalam blok catch. Jika ingin blok kode catch dieksekusi, 
tambahkan error di dalam blok try.

--------------------------------------------------------------------
try {
  console.log('Memulai program');
  throw new Error('Error: Program berhenti');
  console.log('Mengakhiri program');
} catch (err) {
  console.log('Karena ada error, blok ini akan dieksekusi');
}
Output : Memulai program
Karena ada error, blok ini akan dieksekusi
--------------------------------------------------------------------
Catatan
Ketika error dibangkitkan, kode yang ada di bawahnya tidak akan tereksekusi. Pada kasus ini, program akan 
langsung lompat ke blok catch.


Finally
Finally adalah blok kode yang berada di akhir try-catch. Bilamana catch dieksekusi hanya ketika ada error di 
dalam blok try, blok yang ada di finally akan selalu dieksekusi.

--------------------------------------------------------------------
try {
  console.log('Ini try block');
} catch (err) {
  console.log('Ini catch block');
} finally {
  console.log('Ini finally block');
}
Output : Ini try block
Ini finally block
--------------------------------------------------------------------
Ketika dijalankan, akan tampil di terminal/console yang mencetak tulisan “Ini try block“ dan “Ini finally block”. 
Dengan menggunakan finally, ia tidak peduli apakah blok try memiliki error atau tidak. 

--------------------------------------------------------------------
try {
  console.log('Ini try block');
  throw new Error('Error: Program berhenti');
} catch (err) {
  console.log('Ini catch block');
} finally {
  console.log('Ini finally block');
}
Output : Ini try block
Ini catch block
Ini finally block
--------------------------------------------------------------------


Implementasi Flow Control
Rasanya ada yang kurang ketika sudah mengetahui teori flow control “sang pengendali program” 
tanpa mengimplementasikan flow control.

Misalnya, Anda ingin membuat program untuk mengetahui predikat berdasarkan nilai yang dimasukkan. 
Perhatikan kode program berikut ini.
--------------------------------------------------------------------
function checkGrades(grades) {
  for (let i = 0; i < grades.length; i++) {
    if (typeof grades[i] !== 'number') {
      throw new Error('Invalid input. Please provide an array of numbers.');
    }

    const grade = grades[i];
    let predicate;

    if (grade >= 90) {
      predicate = 'A';
    } else if (grade >= 80) {
      predicate = 'B';
    } else if (grade >= 70) {
      predicate = 'C';
    } else if (grade >= 60) {
      predicate = 'D';
    } else {
      predicate = 'E';
    }

    console.log(`Grade ${i + 1}: ${grade} (${predicate})`);
  }
}

try {
  const studentGrades = [95, 85, 65, 80, 70];
  checkGrades(studentGrades);
} catch (e) {
  console.error(e);
}
Output : Grade 1: 95 (A)
Grade 2: 85 (B)
Grade 3: 65 (D)
Grade 4: 80 (B)
Grade 5: 70 (C)
--------------------------------------------------------------------
function checkGrades akan menerima input berupa array of number. Di dalamnya, perulangan akan dilakukan untuk 
mendapatkan masing-masing nilai di dalam array grades. Selanjutnya akan ada percabangan dengan if untuk menagani 
exceptions ketika grades bukanlah number.

Try-Catch digunakan untuk menangani exception ketika function checkGrades error. Di saat function checkGrades 
menerima argument berupa string, maka blok catch akan dibangkitkan dan menampilkan pesan error di terminal/console.





